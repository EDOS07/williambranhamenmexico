"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-stately+numberfield@3.9.10_react@19.1.0";
exports.ids = ["vendor-chunks/@react-stately+numberfield@3.9.10_react@19.1.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@react-stately+numberfield@3.9.10_react@19.1.0/node_modules/@react-stately/numberfield/dist/useNumberFieldState.mjs":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@react-stately+numberfield@3.9.10_react@19.1.0/node_modules/@react-stately/numberfield/dist/useNumberFieldState.mjs ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useNumberFieldState: () => (/* binding */ $de67e98908f0c6ee$export$7f629e9dc1ecf37c)\n/* harmony export */ });\n/* harmony import */ var _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-stately/utils */ \"(ssr)/./node_modules/.pnpm/@react-stately+utils@3.10.5_react@19.1.0/node_modules/@react-stately/utils/dist/number.mjs\");\n/* harmony import */ var _react_stately_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-stately/utils */ \"(ssr)/./node_modules/.pnpm/@react-stately+utils@3.10.5_react@19.1.0/node_modules/@react-stately/utils/dist/useControlledState.mjs\");\n/* harmony import */ var _react_stately_form__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @react-stately/form */ \"(ssr)/./node_modules/.pnpm/@react-stately+form@3.1.2_react@19.1.0/node_modules/@react-stately/form/dist/useFormValidationState.mjs\");\n/* harmony import */ var _internationalized_number__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @internationalized/number */ \"(ssr)/./node_modules/.pnpm/@internationalized+number@3.6.0/node_modules/@internationalized/number/dist/NumberFormatter.mjs\");\n/* harmony import */ var _internationalized_number__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @internationalized/number */ \"(ssr)/./node_modules/.pnpm/@internationalized+number@3.6.0/node_modules/@internationalized/number/dist/NumberParser.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.2.4_@babel+core@7.2_16ce3abb760b473ba98db4731cd0a223/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\nfunction $de67e98908f0c6ee$export$7f629e9dc1ecf37c(props) {\n    let { minValue: minValue, maxValue: maxValue, step: step, formatOptions: formatOptions, value: value, defaultValue: defaultValue = NaN, onChange: onChange, locale: locale, isDisabled: isDisabled, isReadOnly: isReadOnly } = props;\n    if (value === null) value = NaN;\n    if (value !== undefined && !isNaN(value)) {\n        if (step !== undefined && !isNaN(step)) value = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.snapValueToStep)(value, minValue, maxValue, step);\n        else value = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.clamp)(value, minValue, maxValue);\n    }\n    if (!isNaN(defaultValue)) {\n        if (step !== undefined && !isNaN(step)) defaultValue = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.snapValueToStep)(defaultValue, minValue, maxValue, step);\n        else defaultValue = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.clamp)(defaultValue, minValue, maxValue);\n    }\n    let [numberValue, setNumberValue] = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_2__.useControlledState)(value, isNaN(defaultValue) ? NaN : defaultValue, onChange);\n    let [inputValue, setInputValue] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>isNaN(numberValue) ? '' : new (0, _internationalized_number__WEBPACK_IMPORTED_MODULE_3__.NumberFormatter)(locale, formatOptions).format(numberValue));\n    let numberParser = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new (0, _internationalized_number__WEBPACK_IMPORTED_MODULE_4__.NumberParser)(locale, formatOptions), [\n        locale,\n        formatOptions\n    ]);\n    let numberingSystem = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>numberParser.getNumberingSystem(inputValue), [\n        numberParser,\n        inputValue\n    ]);\n    let formatter = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new (0, _internationalized_number__WEBPACK_IMPORTED_MODULE_3__.NumberFormatter)(locale, {\n            ...formatOptions,\n            numberingSystem: numberingSystem\n        }), [\n        locale,\n        formatOptions,\n        numberingSystem\n    ]);\n    let intlOptions = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>formatter.resolvedOptions(), [\n        formatter\n    ]);\n    let format = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>isNaN(value) || value === null ? '' : formatter.format(value), [\n        formatter\n    ]);\n    let validation = (0, _react_stately_form__WEBPACK_IMPORTED_MODULE_5__.useFormValidationState)({\n        ...props,\n        value: numberValue\n    });\n    let clampStep = step !== undefined && !isNaN(step) ? step : 1;\n    if (intlOptions.style === 'percent' && (step === undefined || isNaN(step))) clampStep = 0.01;\n    // Update the input value when the number value or format options change. This is done\n    // in a useEffect so that the controlled behavior is correct and we only update the\n    // textfield after prop changes.\n    let [prevValue, setPrevValue] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(numberValue);\n    let [prevLocale, setPrevLocale] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(locale);\n    let [prevFormatOptions, setPrevFormatOptions] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(formatOptions);\n    if (!Object.is(numberValue, prevValue) || locale !== prevLocale || formatOptions !== prevFormatOptions) {\n        setInputValue(format(numberValue));\n        setPrevValue(numberValue);\n        setPrevLocale(locale);\n        setPrevFormatOptions(formatOptions);\n    }\n    let parsedValue = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>numberParser.parse(inputValue), [\n        numberParser,\n        inputValue\n    ]);\n    let commit = ()=>{\n        // Set to empty state if input value is empty\n        if (!inputValue.length) {\n            setNumberValue(NaN);\n            setInputValue(value === undefined ? '' : format(numberValue));\n            return;\n        }\n        // if it failed to parse, then reset input to formatted version of current number\n        if (isNaN(parsedValue)) {\n            setInputValue(format(numberValue));\n            return;\n        }\n        // Clamp to min and max, round to the nearest step, and round to specified number of digits\n        let clampedValue;\n        if (step === undefined || isNaN(step)) clampedValue = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.clamp)(parsedValue, minValue, maxValue);\n        else clampedValue = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.snapValueToStep)(parsedValue, minValue, maxValue, step);\n        clampedValue = numberParser.parse(format(clampedValue));\n        setNumberValue(clampedValue);\n        // in a controlled state, the numberValue won't change, so we won't go back to our old input without help\n        setInputValue(format(value === undefined ? clampedValue : numberValue));\n    };\n    let safeNextStep = (operation, minMax = 0)=>{\n        let prev = parsedValue;\n        if (isNaN(prev)) {\n            // if the input is empty, start from the min/max value when incrementing/decrementing,\n            // or zero if there is no min/max value defined.\n            let newValue = isNaN(minMax) ? 0 : minMax;\n            return (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.snapValueToStep)(newValue, minValue, maxValue, clampStep);\n        } else {\n            // otherwise, first snap the current value to the nearest step. if it moves in the direction\n            // we're going, use that value, otherwise add the step and snap that value.\n            let newValue = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.snapValueToStep)(prev, minValue, maxValue, clampStep);\n            if (operation === '+' && newValue > prev || operation === '-' && newValue < prev) return newValue;\n            return (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.snapValueToStep)($de67e98908f0c6ee$var$handleDecimalOperation(operation, prev, clampStep), minValue, maxValue, clampStep);\n        }\n    };\n    let increment = ()=>{\n        let newValue = safeNextStep('+', minValue);\n        // if we've arrived at the same value that was previously in the state, the\n        // input value should be updated to match\n        // ex type 4, press increment, highlight the number in the input, type 4 again, press increment\n        // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input\n        if (newValue === numberValue) setInputValue(format(newValue));\n        setNumberValue(newValue);\n        validation.commitValidation();\n    };\n    let decrement = ()=>{\n        let newValue = safeNextStep('-', maxValue);\n        if (newValue === numberValue) setInputValue(format(newValue));\n        setNumberValue(newValue);\n        validation.commitValidation();\n    };\n    let incrementToMax = ()=>{\n        if (maxValue != null) {\n            setNumberValue((0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.snapValueToStep)(maxValue, minValue, maxValue, clampStep));\n            validation.commitValidation();\n        }\n    };\n    let decrementToMin = ()=>{\n        if (minValue != null) {\n            setNumberValue(minValue);\n            validation.commitValidation();\n        }\n    };\n    let canIncrement = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>!isDisabled && !isReadOnly && (isNaN(parsedValue) || maxValue === undefined || isNaN(maxValue) || (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.snapValueToStep)(parsedValue, minValue, maxValue, clampStep) > parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation('+', parsedValue, clampStep) <= maxValue), [\n        isDisabled,\n        isReadOnly,\n        minValue,\n        maxValue,\n        clampStep,\n        parsedValue\n    ]);\n    let canDecrement = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>!isDisabled && !isReadOnly && (isNaN(parsedValue) || minValue === undefined || isNaN(minValue) || (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.snapValueToStep)(parsedValue, minValue, maxValue, clampStep) < parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation('-', parsedValue, clampStep) >= minValue), [\n        isDisabled,\n        isReadOnly,\n        minValue,\n        maxValue,\n        clampStep,\n        parsedValue\n    ]);\n    let validate = (value)=>numberParser.isValidPartialNumber(value, minValue, maxValue);\n    return {\n        ...validation,\n        validate: validate,\n        increment: increment,\n        incrementToMax: incrementToMax,\n        decrement: decrement,\n        decrementToMin: decrementToMin,\n        canIncrement: canIncrement,\n        canDecrement: canDecrement,\n        minValue: minValue,\n        maxValue: maxValue,\n        numberValue: parsedValue,\n        setNumberValue: setNumberValue,\n        setInputValue: setInputValue,\n        inputValue: inputValue,\n        commit: commit\n    };\n}\nfunction $de67e98908f0c6ee$var$handleDecimalOperation(operator, value1, value2) {\n    let result = operator === '+' ? value1 + value2 : value1 - value2;\n    // Check if we have decimals\n    if (value1 % 1 !== 0 || value2 % 1 !== 0) {\n        const value1Decimal = value1.toString().split('.');\n        const value2Decimal = value2.toString().split('.');\n        const value1DecimalLength = value1Decimal[1] && value1Decimal[1].length || 0;\n        const value2DecimalLength = value2Decimal[1] && value2Decimal[1].length || 0;\n        const multiplier = Math.pow(10, Math.max(value1DecimalLength, value2DecimalLength));\n        // Transform the decimals to integers based on the precision\n        value1 = Math.round(value1 * multiplier);\n        value2 = Math.round(value2 * multiplier);\n        // Perform the operation on integers values to make sure we don't get a fancy decimal value\n        result = operator === '+' ? value1 + value2 : value1 - value2;\n        // Transform the integer result back to decimal\n        result /= multiplier;\n    }\n    return result;\n}\n\n\n\n//# sourceMappingURL=useNumberFieldState.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@react-stately+numberfield@3.9.10_react@19.1.0/node_modules/@react-stately/numberfield/dist/useNumberFieldState.mjs\n");

/***/ })

};
;